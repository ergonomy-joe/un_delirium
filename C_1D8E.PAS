{$G+}
UNIT C_1D8E;{musix/sfx}

INTERFACE
CONST
	D_028C:INTEGER = 22222;{rate}

{C_1D8E_003F}PROCEDURE MUSIC_setFlags(bp06:BYTE);
{C_1D8E_006C}PROCEDURE MUSIC_setVolumes(bp08,bp06:BYTE);
FUNCTION C_1D8E_00A6:BYTE;
PROCEDURE C_1D8E_00DA(bp06:BYTE);
PROCEDURE C_1D8E_0107;
{C_1D8E_015B}FUNCTION MUSIC_loadSFX(bp08:POINTER; bp06:INTEGER):INTEGER;
PROCEDURE C_1D8E_01EA;
{C_1D8E_0238}PROCEDURE MUSIC_playSFX(bp0a,bp08,bp06:INTEGER);
{C_1D8E_0264}PROCEDURE MUSIC_loadSong(bp08:POINTER; bp06:INTEGER);
{C_1D8E_0290}PROCEDURE MUSIC_playSong;
{C_1D8E_02AA}PROCEDURE MUSIC_stopSong;
{C_1D8E_0346}PROCEDURE MUSIC_init;
{C_1D8E_046D}PROCEDURE MUSIC_clean;

IMPLEMENTATION

USES
	C_1DD9,
	BSS;

{C_0000}PROCEDURE MusicDriver(bp12:WORD; bp10,bp0e:WORD; bp0c,bp0a,bp08,bp06:WORD); ASSEMBLER;
ASM
	PUSH	BP
	MOV	BP,SP

	MOV	DX,[bp+$06]
	MOV	CX,[bp+$08]
	MOV	BX,[bp+$0a]
	MOV	AX,[bp+$12]
	MOV	ES,AX
	MOV	AX,[bp+$0c]

	PUSHA	

	PUSH	DS
	LDS	SI,D_2AE0
	CALL	DWORD PTR [bp+$0e]
	POP	DS

	MOV	D_2AEA,AX
	MOV	D_2AEC,BX
	MOV	D_2AEE,CX
	MOV	D_2AF0,DX

	POPA	

	MOV	SP,BP
	POP	BP
END;

{C_1D8E_003F}PROCEDURE MUSIC_setFlags(bp06:BYTE);
BEGIN
	IF D_2A38 <> 0
	THEN MusicDriver(0,D_2AE6,$140,bp06,0,0,0);
END;

{C_1D8E_006C}PROCEDURE MUSIC_setVolumes(bp08,bp06:BYTE);
BEGIN
	IF D_2A38 <> 0
	THEN MusicDriver(0,D_2AE6,$12c,$ff,bp06 SHL 8 + bp08,0,0);
END;

FUNCTION C_1D8E_00A6:BYTE;
BEGIN
	IF D_2A38 <> 0
	THEN MusicDriver(0,D_2AE6,$134,0,0,0,0);
	C_1D8E_00A6 := D_2AEA;
END;

PROCEDURE C_1D8E_00DA(bp06:BYTE);
BEGIN
	IF D_2A38 <> 0
	THEN MusicDriver(0,D_2AE6,$138,bp06,0,0,0);
END;

PROCEDURE C_1D8E_0107;
BEGIN
	IF D_2A38 <> 0
	THEN MusicDriver(0,D_2AE6,$130,0,0,0,0);
END;

PROCEDURE C_012E(VAR bp04:WORD);
BEGIN
	IF D_2A38 <> 0
	THEN MusicDriver(0,D_2AE6,$108,bp04,0,0,0);
END;

{C_1D8E_015B}FUNCTION MUSIC_loadSFX(bp08:POINTER; bp06:INTEGER):INTEGER;
BEGIN
	IF D_2A38 <> 0
	THEN BEGIN
		MusicDriver(0,D_2AE6,$118,WORD(bp08^),bp06,$80,0);
		MUSIC_loadSFX := D_2AEA;
	END;
END;

PROCEDURE C_0197;
BEGIN
	IF D_2A38 <> 0
	THEN MusicDriver(0,D_2AE6,$10c,0,0,0,0);
END;

PROCEDURE C_01BE;
BEGIN
	IF D_2A38 <> 0
	THEN BEGIN
		MusicDriver(0,D_2AE6,$110,0,0,0,0);
		D_2A34 := FALSE;
	END;
END;

PROCEDURE C_1D8E_01EA;
BEGIN
	IF D_2A38 <> 0
	THEN MusicDriver(0,D_2AE6,$120,0,0,0,0);
END;

PROCEDURE C_0211;
BEGIN
	IF D_2A38 <> 0
	THEN MusicDriver(0,D_2AE6,$114,0,0,0,0);
END;

{C_1D8E_0238}PROCEDURE MUSIC_playSFX(bp0a,bp08,bp06:INTEGER);
BEGIN
	IF D_2A38 <> 0
	THEN MusicDriver(0,D_2AE6,$11c,bp06,bp0a,bp08,0);
END;

{C_1D8E_0264}PROCEDURE MUSIC_loadSong(bp08:POINTER; bp06:INTEGER);
BEGIN
	IF D_2A38 <> 0
	THEN BEGIN
		MUSIC_setVolumes(bp06,$ff);
		C_012E(WORD(bp08^));
		D_2A34 := TRUE;
	END;
END;

{C_1D8E_0290}PROCEDURE MUSIC_playSong;
BEGIN
	IF D_2A38 <> 0
	THEN BEGIN
		C_0197;
		C_1D8E_0107;
	END;
END;

{C_1D8E_02AA}PROCEDURE MUSIC_stopSong;
BEGIN
	IF D_2A38 <> 0
	THEN BEGIN
		C_01BE;
		C_1D8E_01EA;
		C_0211;
	END;
END;

{C_02FB}PROCEDURE MemoryAlloc;
LABEL C_032D;
BEGIN
	D_2AF6 := 'MemoryAlloc failed. Not enough conventional memory!';
	ASM
		MOV	AH,$48
		MOV	BX,D_2AE8
		ADD	BX,$100
		SHR	BX,4
		ADD	BX,6
		INT	$21
		JNB	C_032D
		INT	$23	{Ctrl-Break?}
C_032D:
		MOV	D_2AE6,AX
	END;
END;

{C_1D8E_0346}PROCEDURE MUSIC_init;
VAR _modDriver:STRING[4];
BEGIN
	CASE D_2A38 OF
		1: _modDriver := 'UMOD';
		2,5: _modDriver := 'SMOD';
		3: _modDriver := 'S16M';
		4: _modDriver := 'PMOD';
		ELSE EXIT;
	END;
	RES_find(_modDriver,RES_offset,RES_size);
	D_2AE8 := RES_size;
	MemoryAlloc;
	D_2A35 := TRUE;
	D_2AE0 := PTR(D_2AE6,$100);
	BLOCKREAD(RES_handle,D_2AE0^,D_2AE8);
	D_2A4C.f_00 := D_2A3C;
	D_2A4C.f_02 := D_2A3A;
	D_2A4C.f_03 := D_2A39;
	D_2A4C.f_04 := D_028C;
	IF D_2A38 = 5
	THEN D_2A4C.f_06 := 1
	ELSE D_2A4C.f_06 := 0;
	D_2A4C.f_07 := 1;
	D_2A4C.f_08 := 0;
	D_2A4C.f_09 := $80;
	D_2A4C.f_0a := 0;
	D_2A4C.f_0b := $FF;
	D_2A4C.f_0c := $FF;
	D_2A4C.f_0d := $FF;
	MusicDriver(SEG(D_2A4C),D_2AE6,$104,0,OFS(D_2A4C),$c242,0);
END;

{C_1D8E_046D}PROCEDURE MUSIC_clean;
BEGIN
	IF D_2A38 <> 0
	THEN BEGIN
		D_2A35 := FALSE;
		ASM
			MOV	AH,$49
			MOV	ES,D_2AE6
			INT	$21
		END;
	END;
END;

{C_1D8E_048D}
BEGIN
	D_2A34 := FALSE;
	D_2A35 := FALSE;
END.
